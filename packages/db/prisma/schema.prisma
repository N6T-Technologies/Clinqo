// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Roles {
    DOCTOR
    PATIENT
    CLINIC_HEAD
    EMPLOYEE
    ADMIN
}

enum WeekDays {
    MONDAY
    TUESDAY
    WEDNESDAY
    THRUSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum Genders {
    MALE
    FEMALE
    OTHER
}

enum EmployeeStatus {
    ACTIVE
    INACTIVE
}

enum EmployeeDesignation {
    FRONT_DESK_MANAGER
    CLINIC_HEAD
}

enum PaymentMethods {
    UPI
    DEBIT_CARD
    CREDIT_CARD
    CASH
}

enum AppointmentStatus {
    COMPLETED
    CANCELED
}

enum RecordType {
    X_RAY
}

enum RecordFormat {
    PDF
}

model User {
    id            String      @id @default(cuid())
    firstName     String      @map("first_name")
    lastName      String      @map("last_name")
    dateOfBirth   DateTime    @map("date_of_birth")
    image         String?
    gender        Genders
    email         String      @unique
    contactNumber String      @map("contact_number")
    countryCode   String      @map("country_code")
    password      String
    role          Roles
    accounts      Account[]
    createdAt     DateTime    @default(now()) @map("created_at")
    updatedAt     DateTime    @updatedAt @map("updated_at")
    Admin         Admin?
    ClinicHead    ClinicHead?
    Employee      Employee?
    Doctor        Doctor?
    Patient       Patient?

    @@map("users")
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            String  @map("user_id")
    type              String
    provider          String  @default("credentials")
    providerAccountId String  @map("provider_account_id")
    refreshToken      String? @map("refresh_token") @db.Text
    accessToken       String? @map("access_token") @db.Text
    expiresAt         Int?    @map("expires_at")
    tokenType         String? @map("token_type")
    scope             String?
    idToken           String? @map("id_token") @db.Text
    sessionState      String? @map("session_state")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model PasswordResetToken {
    id      Int      @id @default(autoincrement())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
    @@map("password_reset_tokens")
}

model Clinic {
    id              String           @id @default(cuid())
    name            String
    logo            String
    gstin           String           @unique
    address         ClinicAddress?
    employees       Employee[]
    doctors         Doctor[]
    clinicHeads     ClinicHead[]
    doctorSchedules DoctorSchedule[]
    appointments    Appointment[]
    createdAt       DateTime         @default(now()) @map("created_at")
    updatedAt       DateTime         @updatedAt @map("updated_at")
    adminId         String           @map("admin_id")
    admin           Admin            @relation(fields: [adminId], references: [id])

    @@index([gstin])
    @@map("clinics")
}

model ClinicAddress {
    id           Int     @id @default(autoincrement())
    addressLine1 String  @map("address_line_1")
    addressLine2 String? @map("address_line_2")
    city         String
    state        String
    pincode      String
    country      String
    clinic       Clinic  @relation(fields: [clinicId], references: [id])
    clinicId     String  @unique @map("clinic_id")

    @@map("clinic_addresses")
}

model Admin {
    id      String   @id @default(cuid())
    userId  String   @unique @map("user_id")
    user    User     @relation(fields: [userId], references: [id])
    clinics Clinic[]

    @@map("admins")
}

model ClinicHead {
    id       String @id @default(cuid())
    userId   String @unique @map("user_id")
    clinicId String @map("clinic_id")
    user     User   @relation(fields: [userId], references: [id])
    clinic   Clinic @relation(fields: [clinicId], references: [id])

    @@map("clinic_heads")
}

model Employee {
    id                  String              @id @default(cuid())
    userId              String              @unique @map("user_id")
    clinicId            String              @map("clinic_id")
    employeeDesignation EmployeeDesignation @map("employee_designation")
    employeeStatus      EmployeeStatus      @map("employee_status")
    user                User                @relation(fields: [userId], references: [id])
    clinic              Clinic              @relation(fields: [clinicId], references: [id])

    @@map("employees")
}

model Doctor {
    id                    String           @id @default(cuid())
    userId                String           @unique @map("user_id")
    specialisation        String
    mciNumber             String           @unique @map("mci_number")
    user                  User             @relation(fields: [userId], references: [id])
    createdRecords        PatientRecord[]
    clinics               Clinic[]
    schedules             DoctorSchedule[]
    completedAppointments Appointment[]

    @@index(mciNumber)
    @@map("doctors")
}

model DoctorSchedule {
    serialNo  Int      @default(autoincrement()) @map("serial_no")
    doctorId  String   @map("doctor_id")
    clinicId  String   @map("clinic_id")
    dayOfWeek WeekDays @map("day_of_week")
    startTime DateTime @map("start_time")
    endTime   DateTime @map("end_time")
    doctor    Doctor   @relation(fields: [doctorId], references: [id])
    clinic    Clinic   @relation(fields: [clinicId], references: [id])

    @@id([doctorId, clinicId])
    @@map("doctor_schedules")
}

model Patient {
    id          String           @id @default(cuid())
    appointment Appointment[]
    records     PatientRecord[]
    address     PatientAddress[]
    userId      String           @unique @map("user_id")
    user        User             @relation(fields: [userId], references: [id])

    @@map("patients")
}

model PatientAddress {
    id           Int     @id @default(autoincrement())
    addressLine1 String? @map("address_line_2")
    addressLine2 String? @map("address_line_1")
    city         String
    state        String
    pincode      String
    country      String
    patientId    String  @map("patient_id")
    Patient      Patient @relation(fields: [patientId], references: [id])

    @@map("patient_addresses")
}

model PatientRecord {
    id           Int          @id @default(autoincrement())
    recordType   RecordType   @map("record_type")
    recordFormat RecordFormat @map("record_format")
    recordLink   String       @map("record_link")
    patientId    String?      @map("patient_id")
    Patient      Patient?     @relation(fields: [patientId], references: [id])
    doctorId     String?      @map("doctor_id")
    Doctor       Doctor?      @relation(fields: [doctorId], references: [id])

    @@map("patient_records")
}

model Appointment {
    id                String            @default(cuid())
    doctorId          String            @map("doctor_id")
    clinicId          String            @map("clinic_id")
    patientId         String            @map("patient_id")
    bookTime          DateTime          @map("book_time")
    startTime         DateTime          @map("start_time")
    endTime           DateTime          @map("end_time")
    symptoms          String
    paymentMethod     PaymentMethods    @map("payment_method")
    appointmentStatus AppointmentStatus @map("appointment_status")
    prescription      String
    doctor            Doctor            @relation(fields: [doctorId], references: [id])
    clinic            Clinic            @relation(fields: [clinicId], references: [id])
    patient           Patient           @relation(fields: [patientId], references: [id])

    @@id([doctorId, clinicId, patientId])
    @@index([id])
    @@map("appointments")
}
